#[macro_use]
extern crate diesel;

extern crate dotenv;
mod db;
mod bot;

use std::thread;
use teloxide::Bot;
use teloxide::prelude::{Requester, ResponseResult};
use teloxide::{prelude::*, utils::command::BotCommands};
use teloxide::dptree::case;
use teloxide::types::{ButtonRequest, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, KeyboardMarkup, Message, WebAppInfo};

type HandlerResult = Result<(), Box<dyn std::error::Error + Send + Sync>>;

#[derive(BotCommands, Clone)]
#[command(rename_rule = "lowercase", description = "–°—É—â–µ—Å—Ç–≤—É—é—Ç —ç—Ç–∏ –∫–æ–º–º–∞–Ω–¥—ã:")]
enum Command {
    #[command(description = "–≤—ã —Ç—É—Ç")]
    Help,
    #[command(description = "–ø–æ–ª—É—á–∏—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")]
    Start,
    #[command(description = "–ø–æ–ª—É—á–∏—Ç—å VIP –¥–æ—Å—Ç—É–∫ –∫ –±–æ—Ç—É")]
    Vip,
}

#[derive(Clone, Default)]
pub enum State {
    #[default]
    Start
}

#[tokio::main]
async fn main() {
    pretty_env_logger::init();
    log::info!("Starting throw dice bot...");

    thread::spawn(bot::start);

    let bot = Bot::from_env();

    let filter_command = teloxide::filter_command::<Command, _>()
        .branch(case![Command::Help].endpoint(help))
        .branch(case![Command::Start].endpoint(start))
        .branch(case![Command::Vip].endpoint(vip));

    let filter_message = Update::filter_message()
        .branch(filter_command)
        .branch(dptree::endpoint(invalid));

    let handler = dptree::entry()
        .branch(filter_message);

    Dispatcher::builder(bot, handler)
        .enable_ctrlc_handler()
        .build()
        .dispatch()
        .await;
}

async fn help(bot: Bot, msg: Message) -> HandlerResult {
    bot.send_message(msg.chat.id, Command::descriptions().to_string()).await?;
    Ok(())
}

async fn start(bot: Bot, msg: Message) -> HandlerResult {
    let text = format!("
            1000+ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –°–õ–ò–í–û–í\n\
            / –¢–£–¢ –ë–£–î–ï–¢ –°–°–´–õ–ö–ê /\n\
            –¢–ê–ö–ñ–ï –°–ú–û–¢–†–ò –°–õ–ò–í–´ –ü–†–Ø–ú–û –í –ë–û–¢–ï\n\
            –ö–ª–∏–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É üëáüëáüëá");

    let webapp = WebAppInfo {
        url: "http://example.com/".parse().unwrap()
    };

    let list = InlineKeyboardMarkup::new(vec![vec![
        InlineKeyboardButton::web_app("–û—Ç–∫—Ä—ã—Ç—å", webapp)
    ]]);

    bot.send_message(msg.chat.id, text).reply_markup(list).await?;
    Ok(())
}

async fn vip(bot: Bot, msg: Message) -> HandlerResult {
    bot.send_message(msg.chat.id, "–¢—É—Ç –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ –∫–∞—Ä—Ç–µ").await?;
    Ok(())
}

async fn invalid(bot: Bot, msg: Message) -> HandlerResult {
    bot.send_message(msg.chat.id, "–í–∞—à–∞ –∫–æ–º–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ /start –∏–ª–∏ /help").await?;
    Ok(())
}